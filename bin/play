#!/usr/bin/env ruby

#
# CLI tool for Toy Robot Simulator.
# This tool supports YAML format in file mode
# and input from console in interactive mode
#
# Author: Victor Lam
# Email: victorebox@gmail.com
#

lib = File.expand_path('../../lib', __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'toy_robot'
require 'yaml'

# monkey patch String to add a helper to verify Integer
class String
  def is_i?
    Integer self rescue false
  end
end

# print usage and quit the app
def print_help_and_exit
  puts <<-HELP
Usage: play [arguments]
  -i        Interactive mode
  -f file   Load actions from file
HELP
  exit(0)
end

def print_commands
  puts <<-COMMANDS
You can use the following commands to control the robot
PLACE x, y, direction   place robot on playground
  COMMANDS
end

def set_name
  name = get_cmd "Give it a name (#{$game.name}) > "
  $game.name = name unless name.empty?
end

def set_size
  size = get_cmd "Set size of playground (#{$game.playground_size}) > "
  $game.set_playground_size(size.to_i) if size.is_i?
end

def print_commands
  puts <<-WELCOME
Following are available commands:
  PLACE x, y, direction   place robot on playground
                          'x' and 'y' are integer
                          direction can be one of ['north', 'east', 'south', 'west']
  MOVE                    move a step forward
  LEFT                    turn left
  RIGHT                   turn right
  REPORT                  report on current position
  QUIT                    quit the game
  HELP                    print available commands

REMARK: commands are case incensitive

WELCOME
end

def get_cmd(prefix)
  print prefix
  gets.strip
end

def extract_cmd(cmd)
  cmd.split.first.to_s.downcase
end

def print_error_message(e)
  puts "Oops, #{e.message}. Please try again."
end

def place_robot(cmd)
  x, y, f = cmd.slice(/\s.*/).to_s.split(',')
  raise ArgumentError, 'invalid position' if x.nil? || y.nil? || f.nil?
  raise ArgumentError, 'x and y must be a number' if !x.is_i? || !y.is_i?

  $game.place!(x.to_i, y.to_i, f.strip)
rescue StandardError => e
  print_error_message e
end

def move_robot(cmd)
  $game.send("#{cmd}!".to_sym)
rescue StandardError => e
  print_error_message e
end

def print_position
  begin
    position = $game.report!
  rescue StandardError => e
    return print_error_message e
  end

  # print playground with robot position
  printing = []
  size = $game.playground_size
  grid_width = 3
  (0..size).each do |row|
    if row == size
      # print top line
      printing.unshift('-' * ($game.playground_size * grid_width + 1))
    else
      print_col = ['', '']
      (0..size).each do |col|
        if col == size
          print_col[0] += '|'
        elsif row == position[:y] && col == position[:x]
          print_col[0] += "|#{robot_direction(position[:f])} "
        else
          print_col[0] += '|  '
        end
        print_col[1] += col == size ? '-' : '-' * grid_width
      end
      printing.unshift *print_col
    end
  end
  puts printing
end

def robot_direction(direction)
  case direction
    when ToyRobot::Robot::NORTH then '▲'
    when ToyRobot::Robot::EAST  then '▶'
    when ToyRobot::Robot::SOUTH then '▼'
    when ToyRobot::Robot::WEST  then '◀'
  end
end

def handle_cmd(cmd, mode)
  action = extract_cmd(cmd)
  exit(0) if cmd == 'quit'

  case action
    when 'place'
      place_robot(cmd)
    when 'move', 'left', 'right'
      move_robot(action)
    when 'report'
      print_position
    else
      mode == 'i' ? print_commands : (puts 'Invalid command')
  end
end

# load commands from console
def interactive_mode
  puts "Welcome to Toy Robot Simulator!"

  set_name
  set_size

  print_commands
  puts "Let's start"

  while true
    handle_cmd(get_cmd('> '), 'i')
  end
end

def file_mode(filepath)
  instructions = YAML.load_file filepath

  # setup
  if instructions.key?('name') && !instructions['name'].empty?
    $game.name = instructions['name']
  end
  if instructions.key?('size') && !instructions['size'].to_s.is_i?
    $game.playground_size = instructions['size'].to_i
  end

  # run commands
  instructions['commands'].each do |cmd|
    puts "> #{cmd}"
    handle_cmd(cmd, 'f')
  end
end

$game = ToyRobot::Simulator.new
case ARGV.shift # mode
  when '-i' then interactive_mode
  when '-f' then file_mode(ARGV.shift)
  else print_help_and_exit
end
