#!/usr/bin/env ruby

#
# CLI tool for Toy Robot Simulator.
# This tool supports YAML format in file mode
# and input from console in interactive mode
#
# Author: Victor Lam
# Email: victorebox@gmail.com
#

lib = File.expand_path('../../lib', __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'toy_robot'
require 'yaml'

# monkey patch String to add a helper to verify Integer
class String
  def is_i?
    Integer self rescue false
  end
end

# print usage and quit the app
def print_help_and_exit
  puts <<-HELP
Usage: play [arguments]
  -i        Interactive mode
  -f file   Load actions from file
HELP
  exit(0)
end

def print_commands
  puts <<-COMMANDS
You can use the following commands to control the robot
PLACE x, y, direction   place robot on playground
  COMMANDS
end

def set_name(game)
  name = get_cmd "Give it a name (#{game.name}) > "
  game.name = name unless name.empty?
end

def set_size(game)
  size = get_cmd "Set size of playground (#{game.playground_size}) > "
  game.set_playground_size(size.to_i) if size.is_i?
end

def print_commands
  puts <<-WELCOME
Following are available commands:
  PLACE x, y, direction   place robot on playground
                          'x' and 'y' are integer
                          direction can be one of ['north', 'east', 'south', 'west']
  MOVE                    move a step forward
  LEFT                    turn left
  RIGHT                   turn right
  REPORT                  report on current position
  QUIT                    quit the game
  HELP                    print available commands

REMARK: commands are case incensitive

WELCOME
end

def get_cmd(prefix)
  print prefix
  gets.strip
end

def extract_cmd(cmd)
  cmd.split.first.to_s.downcase
end

def print_error_message(e)
  puts "Oops, #{e.message}. You may type HELP for available commands."
end

def place_robot(game, cmd)
  x, y, f = cmd.slice(/\s.*/).to_s.split(',')
  raise ArgumentError, 'invalid position' if x.nil? || y.nil? || f.nil?
  raise ArgumentError, 'x and y must be a number' if !x.is_i? || !y.is_i?

  game.place!(x.to_i, y.to_i, f.strip)
rescue StandardError => e
  print_error_message e
end

def move_robot(game, cmd)
  game.send("#{cmd}!".to_sym)
rescue StandardError => e
  print_error_message e
end

def print_position(game)
  begin
    position = game.report!
  rescue StandardError => e
    return print_error_message e
  end

  # print playground with robot position
  printing = []
  size = game.playground_size
  grid_width = 3
  (0..size).each do |row|
    if row == size
      # print top line
      printing.unshift('-' * (game.playground_size * grid_width + 1))
    else
      print_col = ['', '']
      (0..size).each do |col|
        if col == size
          print_col[0] += '|'
        elsif row == position[:x] && col == position[:y]
          print_col[0] += "|#{robot_direction(position[:f])} "
        else
          print_col[0] += '|  '
        end
        print_col[1] += col == size ? '-' : '-' * grid_width
      end
      printing.unshift *print_col
    end
  end
  puts printing
end

def robot_direction(direction)
  case direction
    when ToyRobot::Robot::NORTH then '▲'
    when ToyRobot::Robot::EAST  then '▶'
    when ToyRobot::Robot::SOUTH then '▼'
    when ToyRobot::Robot::WEST  then '◀'
  end
end

# load commands from console
def interactive_mode
  puts "Welcome to Toy Robot Simulator!"

  game = ToyRobot::Simulator.new
  set_name(game)
  set_size(game)

  print_commands
  puts "Let's start"

  while true
    cmd = get_cmd '> '
    action = extract_cmd(cmd)
    exit(0) if cmd == 'quit'

    case action
      when 'place'
        place_robot(game, cmd)
      when 'move', 'left', 'right'
        move_robot(game, action)
      when 'report'
        print_position(game)
      else
        print_commands
    end
  end
end

def file_mode(filepath)
  puts filepath
end

case ARGV.shift # mode
  when '-i' then interactive_mode
  when '-f' then file_mode ARGV.shift
  else print_help_and_exit
end
